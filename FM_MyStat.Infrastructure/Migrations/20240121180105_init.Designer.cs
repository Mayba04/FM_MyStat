// <auto-generated />
using System;
using FM_MyStat.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FM_MyStat.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240121180105_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "suicide terrorists",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bad Boys",
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("PathFile")
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworksDone");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HomeworkId")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First steps into c# today",
                            End = new DateTime(2024, 1, 21, 21, 1, 5, 262, DateTimeKind.Utc).AddTicks(8626),
                            GroupId = 1,
                            Name = "C# beginning",
                            Start = new DateTime(2024, 1, 21, 19, 1, 5, 262, DateTimeKind.Utc).AddTicks(8616),
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimePublication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "f260b5a1-28ba-48b3-95ab-d98c9441f3b0"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "e9e309a7-51dd-4197-ba38-f3a89f256871"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "205c1ae6-6d3b-4f75-a301-432ad75e5526",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "72e4cf0d-1353-47ff-83d3-d07828ca7071",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "85af61cf-fe22-4e49-87d3-7370e00f5c83",
                            GroupId = 2,
                            Rating = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "7edfa31b-89ea-4ada-8739-e766ed59a75a",
                            GroupId = 2,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "f7c3e4bd-0d6d-41f1-9b4c-f22d65cf1864"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "2948160d-a5aa-442d-8aad-138e9ac4b6e3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9347bf2c-a9c3-4616-94f4-2965e27a1d2b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "0558b633-0bd7-4f74-8d7f-98ff2dd95031",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "66fa09dc-bc64-461d-b442-016e57ff01d9",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f260b5a1-28ba-48b3-95ab-d98c9441f3b0",
                            RoleId = "9347bf2c-a9c3-4616-94f4-2965e27a1d2b"
                        },
                        new
                        {
                            UserId = "e9e309a7-51dd-4197-ba38-f3a89f256871",
                            RoleId = "9347bf2c-a9c3-4616-94f4-2965e27a1d2b"
                        },
                        new
                        {
                            UserId = "f7c3e4bd-0d6d-41f1-9b4c-f22d65cf1864",
                            RoleId = "0558b633-0bd7-4f74-8d7f-98ff2dd95031"
                        },
                        new
                        {
                            UserId = "2948160d-a5aa-442d-8aad-138e9ac4b6e3",
                            RoleId = "0558b633-0bd7-4f74-8d7f-98ff2dd95031"
                        },
                        new
                        {
                            UserId = "205c1ae6-6d3b-4f75-a301-432ad75e5526",
                            RoleId = "66fa09dc-bc64-461d-b442-016e57ff01d9"
                        },
                        new
                        {
                            UserId = "72e4cf0d-1353-47ff-83d3-d07828ca7071",
                            RoleId = "66fa09dc-bc64-461d-b442-016e57ff01d9"
                        },
                        new
                        {
                            UserId = "85af61cf-fe22-4e49-87d3-7370e00f5c83",
                            RoleId = "66fa09dc-bc64-461d-b442-016e57ff01d9"
                        },
                        new
                        {
                            UserId = "7edfa31b-89ea-4ada-8739-e766ed59a75a",
                            RoleId = "66fa09dc-bc64-461d-b442-016e57ff01d9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "f260b5a1-28ba-48b3-95ab-d98c9441f3b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5426996-94aa-4807-bace-427696f9601e",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOgfbWUOmPKxEIiQn87A8MGJmZrf5yJt7CapORo3e7k+FLpDEv0npzW61qy8fvL3Fw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "24d2cf9d-4a8d-48fb-9eff-bab4344bd36e",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com",
                            AdministratorId = 1,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "e9e309a7-51dd-4197-ba38-f3a89f256871",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "792f6072-5a2b-4222-9468-495202f9a970",
                            Email = "admin1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EMAIL.COM",
                            NormalizedUserName = "ADMIN1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvAF7o5wHsnR+14m3MWxJG2xvQx6Pn5ixL8BbCh42rOC0bJwYdQH0fa3ruLNjEo9g==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "90dd748c-57a2-4168-9c01-be93128d5267",
                            TwoFactorEnabled = false,
                            UserName = "admin1@email.com",
                            AdministratorId = 2,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "f7c3e4bd-0d6d-41f1-9b4c-f22d65cf1864",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab5cd165-d362-409d-a5d5-3f3ac90f170e",
                            Email = "teacher@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EMAIL.COM",
                            NormalizedUserName = "TEACHER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEElHfZgboLP8q+1QpUZo005AMdbUuCYerzTtcUTCkQg3EdxvmM2VO4n1/oskKaGKQ==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9622f39e-9439-4f77-9ef0-75c649761300",
                            TwoFactorEnabled = false,
                            UserName = "teacher@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = "2948160d-a5aa-442d-8aad-138e9ac4b6e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6497cead-1003-4b79-abc2-c00c32e8bca5",
                            Email = "teacher1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@EMAIL.COM",
                            NormalizedUserName = "TEACHER1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJvL74ki9D7Gp+K7MNwY3sI7gELW6J0CrD/3S6kvqD7hjyt2gWZYOfPshwBpoUUpg==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0c5d942d-7333-4db2-b922-06c4f0ab29f2",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@email.com",
                            FirstName = "Serhiy",
                            LastName = "Stadnyk",
                            SurName = "Viacheslavovich",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = "205c1ae6-6d3b-4f75-a301-432ad75e5526",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24ab4e9b-c6de-4122-b9c7-2c373c35ac9d",
                            Email = "student@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@EMAIL.COM",
                            NormalizedUserName = "STUDENT@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9atS1dIaLYAl6KynlxGvL0yfmX+ay/viDSWt/h+r4zxs2pyZZDs5w8HKWwqwoJSg==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2ff5d481-92e8-4079-8fad-7f400040d79a",
                            TwoFactorEnabled = false,
                            UserName = "student@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            StudentId = 1,
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "72e4cf0d-1353-47ff-83d3-d07828ca7071",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e09be196-60aa-4973-ae05-4d5ef2a4504b",
                            Email = "student1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EMAIL.COM",
                            NormalizedUserName = "STUDENT1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWxueqIHT2l9rtTJ3kggk1vt6BZkpL9bxXPpSsHcTtbq0yDn4w2IWsyu6TXKgA4EQ==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c05750d4-c06a-4c22-937d-9118f619a100",
                            TwoFactorEnabled = false,
                            UserName = "student1@email.com",
                            FirstName = "Dima",
                            LastName = "Shostak",
                            StudentId = 2,
                            SurName = "Oleksiyovich"
                        },
                        new
                        {
                            Id = "85af61cf-fe22-4e49-87d3-7370e00f5c83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3eaf49df-b54b-4f0c-8575-56f80436f018",
                            Email = "student2@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EMAIL.COM",
                            NormalizedUserName = "STUDENT2@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7yZCAhVwx3ZlWxFVrcVfSuGIj9fRiOeQsd3izJwdOXmD6NJndx1bQw+GmNJ8ylkw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "646551dd-74a6-4bfc-8a91-e6ab3928a0d9",
                            TwoFactorEnabled = false,
                            UserName = "student2@email.com",
                            FirstName = "Yurii",
                            LastName = "Bortnik",
                            StudentId = 3,
                            SurName = "Andriyovich"
                        },
                        new
                        {
                            Id = "7edfa31b-89ea-4ada-8739-e766ed59a75a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9aa84bd7-dba6-48d0-b752-29bd4c88f5a7",
                            Email = "student3@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EMAIL.COM",
                            NormalizedUserName = "STUDENT3@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFT/LaiRWtvV+NA1MCDax6REFTa6BvMyQcbI0yUNIRu7l49ELne83a48B86E5DK8aA==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ac218be1-e16a-4bcb-99e9-0600e3f6e675",
                            TwoFactorEnabled = false,
                            UserName = "student3@email.com",
                            FirstName = "Pavlo",
                            LastName = "Mayba",
                            StudentId = 4,
                            SurName = "Ivanovich"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Homeworks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithOne("Lesson")
                        .HasForeignKey("FM_MyStat.Core.Entities.Lessons.Lesson", "HomeworkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Homework");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Lessons.Lesson", "Lesson")
                        .WithMany("LessonMarks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("LessonMarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Administrator")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Administrator", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Teacher")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Teacher", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
