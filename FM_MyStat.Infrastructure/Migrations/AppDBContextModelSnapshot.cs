// <auto-generated />
using System;
using FM_MyStat.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FM_MyStat.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "suicide terrorists",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bad Boys",
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<string>("PathFile")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<int?>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworksDone");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeworkId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HomeworkId")
                        .IsUnique();

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First steps into c# today",
                            End = new DateTime(2024, 1, 19, 21, 27, 21, 9, DateTimeKind.Utc).AddTicks(422),
                            GroupId = 1,
                            Name = "C# beginning",
                            Start = new DateTime(2024, 1, 19, 19, 27, 21, 9, DateTimeKind.Utc).AddTicks(417),
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b125dc58-6c6b-4a94-a23b-169ad43649f0"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "e399f828-072e-49de-b91e-71eab6ef3741"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "99b17a9f-42e4-42e9-abfd-9df212ecfbd6",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "dec01fe9-bb93-4abd-b9e4-032aeaae8830",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "ba9d2e9c-2821-43c2-8560-bcd4d253c8ae",
                            GroupId = 2,
                            Rating = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "d9ccb0d0-6671-4e77-ab3e-c6b0265ebedb",
                            GroupId = 2,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "08c67ee7-8131-496f-b32c-b92e1f8aa27a"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "82112126-2c07-41e6-9c54-3a4d842e8e35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e437f8a5-0a08-43b1-8eb3-77cbdc506d17",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "12189e68-678f-4fe9-b274-5fee6d98eedc",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "ce9e26f1-7488-4a36-8d09-99bd881ecdf9",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b125dc58-6c6b-4a94-a23b-169ad43649f0",
                            RoleId = "e437f8a5-0a08-43b1-8eb3-77cbdc506d17"
                        },
                        new
                        {
                            UserId = "e399f828-072e-49de-b91e-71eab6ef3741",
                            RoleId = "e437f8a5-0a08-43b1-8eb3-77cbdc506d17"
                        },
                        new
                        {
                            UserId = "08c67ee7-8131-496f-b32c-b92e1f8aa27a",
                            RoleId = "12189e68-678f-4fe9-b274-5fee6d98eedc"
                        },
                        new
                        {
                            UserId = "82112126-2c07-41e6-9c54-3a4d842e8e35",
                            RoleId = "12189e68-678f-4fe9-b274-5fee6d98eedc"
                        },
                        new
                        {
                            UserId = "99b17a9f-42e4-42e9-abfd-9df212ecfbd6",
                            RoleId = "ce9e26f1-7488-4a36-8d09-99bd881ecdf9"
                        },
                        new
                        {
                            UserId = "dec01fe9-bb93-4abd-b9e4-032aeaae8830",
                            RoleId = "ce9e26f1-7488-4a36-8d09-99bd881ecdf9"
                        },
                        new
                        {
                            UserId = "ba9d2e9c-2821-43c2-8560-bcd4d253c8ae",
                            RoleId = "ce9e26f1-7488-4a36-8d09-99bd881ecdf9"
                        },
                        new
                        {
                            UserId = "d9ccb0d0-6671-4e77-ab3e-c6b0265ebedb",
                            RoleId = "ce9e26f1-7488-4a36-8d09-99bd881ecdf9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "b125dc58-6c6b-4a94-a23b-169ad43649f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae17ba2b-6e37-4d21-b97e-d3a3d7de43c1",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5GkDzyNXPzVYFMMZP3lIGy7dJNv1LhvbqMHlfiJzG+v1dPlSZyDuU2FgB9Z6eWig==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8716adad-b99c-4266-9225-c1c7d6d8b088",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com",
                            AdministratorId = 1,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "e399f828-072e-49de-b91e-71eab6ef3741",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b28874c-1ca9-435f-baad-e0caf8dffe40",
                            Email = "admin1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EMAIL.COM",
                            NormalizedUserName = "ADMIN1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWNFaIFWOgpbj8NN8iZP2AQMZ9+2HuhDYMxk7Akb6Rv9yXrmalLUJT0qdRqw/OoIQ==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7ba17115-8b6b-413d-88aa-3ce119a83bed",
                            TwoFactorEnabled = false,
                            UserName = "admin1@email.com",
                            AdministratorId = 2,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "08c67ee7-8131-496f-b32c-b92e1f8aa27a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14df468a-de3a-474d-8faf-3fd485814433",
                            Email = "teacher@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EMAIL.COM",
                            NormalizedUserName = "TEACHER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMD/2zAj3myEPejGYyAfRgIrAE+7URPL2kQHypo37UJsKl3Ca36zl20fJn/76+SQqQ==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d54c3c63-d971-43f6-b18b-3fb8878824de",
                            TwoFactorEnabled = false,
                            UserName = "teacher@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = "82112126-2c07-41e6-9c54-3a4d842e8e35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36611055-2d5f-42cd-9c73-c7dcaf35ef25",
                            Email = "teacher1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@EMAIL.COM",
                            NormalizedUserName = "TEACHER1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELbwhGVqS2mff8cnZjLbAK74KK0LO0b1uy9gjcpdsmNcVPo6jcDl705ktftTl+SKRA==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0bf56df6-832b-4785-91bf-9385bb18972d",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@email.com",
                            FirstName = "Serhiy",
                            LastName = "Stadnyk",
                            SurName = "Viacheslavovich",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = "99b17a9f-42e4-42e9-abfd-9df212ecfbd6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dde482ce-96c9-4e9c-9496-d8062ba423a2",
                            Email = "student@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@EMAIL.COM",
                            NormalizedUserName = "STUDENT@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIgN2NG11nWuzM9bYS9+KtXukveZYphv6AhpIfRsc1t0/bt74nYrmqh5iagVZ60sw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "79e6070b-200c-4e49-ad30-59edbc223c30",
                            TwoFactorEnabled = false,
                            UserName = "student@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            StudentId = 1,
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "dec01fe9-bb93-4abd-b9e4-032aeaae8830",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d96173cd-7cd6-4c23-838b-f7fe354653a2",
                            Email = "student1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EMAIL.COM",
                            NormalizedUserName = "STUDENT1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECrFL0K2hlGObZ2jHURWQt1NxW5dQ7Ga3RXuAAmmFhS8nYP5u7yZrLWyx0Xkg90J4Q==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2937f0f6-48a7-4766-a03c-4a338b3b1f46",
                            TwoFactorEnabled = false,
                            UserName = "student1@email.com",
                            FirstName = "Dima",
                            LastName = "Shostak",
                            StudentId = 2,
                            SurName = "Oleksiyovich"
                        },
                        new
                        {
                            Id = "ba9d2e9c-2821-43c2-8560-bcd4d253c8ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16fc8600-dfb2-497c-8a6e-573608bd3cd2",
                            Email = "student2@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EMAIL.COM",
                            NormalizedUserName = "STUDENT2@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTAGgBc/c52NNsgdxETlsbAUkAkdXbF31N/3QA5Z3kj408IA9Yu1fGRzIfBFNgv6A==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "94ee322a-0011-43f6-af09-b376d2b45611",
                            TwoFactorEnabled = false,
                            UserName = "student2@email.com",
                            FirstName = "Yurii",
                            LastName = "Bortnik",
                            StudentId = 3,
                            SurName = "Andriyovich"
                        },
                        new
                        {
                            Id = "d9ccb0d0-6671-4e77-ab3e-c6b0265ebedb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1daba77d-34ee-471a-82ad-b0c6bf557367",
                            Email = "student3@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EMAIL.COM",
                            NormalizedUserName = "STUDENT3@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFFYOPFjS8ZAqXRJPqCTiOgsGOSSgr8lDVErrn5GeCqVMwF8tR+BPzMpwF4WF6xbhg==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cc4bf702-e593-4de1-b24b-a4e494c18a93",
                            TwoFactorEnabled = false,
                            UserName = "student3@email.com",
                            FirstName = "Pavlo",
                            LastName = "Mayba",
                            StudentId = 4,
                            SurName = "Ivanovich"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Homeworks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithOne("Lesson")
                        .HasForeignKey("FM_MyStat.Core.Entities.Lessons.Lesson", "HomeworkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Homework");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Lessons.Lesson", "Lesson")
                        .WithMany("LessonMarks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("LessonMarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Administrator")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Administrator", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Teacher")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Teacher", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
