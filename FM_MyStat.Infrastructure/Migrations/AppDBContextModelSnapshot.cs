// <auto-generated />
using System;
using FM_MyStat.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FM_MyStat.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "suicide terrorists",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bad Boys",
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("PathFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("int");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeworksDone");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeworkId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("HomeworkId")
                        .IsUnique()
                        .HasFilter("[HomeworkId] IS NOT NULL");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "First steps into c# today",
                            End = new DateTime(2024, 1, 26, 19, 52, 33, 376, DateTimeKind.Utc).AddTicks(2766),
                            GroupId = 1,
                            Name = "C# beginning",
                            Start = new DateTime(2024, 1, 26, 17, 52, 33, 376, DateTimeKind.Utc).AddTicks(2755),
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimePublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Опис до новини 1",
                            Time = new DateTime(2024, 1, 27, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3146),
                            TimePublication = new DateTime(2024, 1, 25, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3150),
                            Title = "Новина 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Опис до новини 2",
                            Time = new DateTime(2024, 1, 28, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3172),
                            TimePublication = new DateTime(2024, 1, 25, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3174),
                            Title = "Новина 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Опис до новини 3",
                            Time = new DateTime(2024, 1, 29, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3209),
                            TimePublication = new DateTime(2024, 1, 25, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3211),
                            Title = "Новина 3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Опис до новини 4",
                            Time = new DateTime(2024, 1, 30, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3225),
                            TimePublication = new DateTime(2024, 1, 25, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3226),
                            Title = "Новина 4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Опис до новини 5",
                            Time = new DateTime(2024, 1, 31, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3239),
                            TimePublication = new DateTime(2024, 1, 25, 16, 52, 33, 376, DateTimeKind.Utc).AddTicks(3240),
                            Title = "Новина 5"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachersSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubjectId = 1,
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "a71366a7-5ddd-4e5e-858d-0ac4bc82014d"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "1e7a0c67-e816-44ee-ba7a-506a7c4d5f25"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "395bb86a-a0f3-42df-a4d1-efc4c648a502",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "6a7897b7-2e41-4e78-9ca6-5cdf06d1f175",
                            GroupId = 1,
                            Rating = 0
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "cc1d9934-720d-4315-a4af-180ef4f14f46",
                            GroupId = 2,
                            Rating = 0
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "0bce2006-9a70-4967-b707-0d03e836b6da",
                            GroupId = 2,
                            Rating = 0
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "0d44cee7-2a63-44be-b856-c22676e9ae44"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "7b9a41a7-2bdd-4412-b287-0c25c8c8a35d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f0758146-0d4f-4911-9f66-ec93dd5326f2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "fe01c14c-cdac-4de9-a290-7e49d3fe5d8f",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "6409a216-d91f-40ba-8b60-908d294b3e85",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a71366a7-5ddd-4e5e-858d-0ac4bc82014d",
                            RoleId = "f0758146-0d4f-4911-9f66-ec93dd5326f2"
                        },
                        new
                        {
                            UserId = "1e7a0c67-e816-44ee-ba7a-506a7c4d5f25",
                            RoleId = "f0758146-0d4f-4911-9f66-ec93dd5326f2"
                        },
                        new
                        {
                            UserId = "0d44cee7-2a63-44be-b856-c22676e9ae44",
                            RoleId = "fe01c14c-cdac-4de9-a290-7e49d3fe5d8f"
                        },
                        new
                        {
                            UserId = "7b9a41a7-2bdd-4412-b287-0c25c8c8a35d",
                            RoleId = "fe01c14c-cdac-4de9-a290-7e49d3fe5d8f"
                        },
                        new
                        {
                            UserId = "395bb86a-a0f3-42df-a4d1-efc4c648a502",
                            RoleId = "6409a216-d91f-40ba-8b60-908d294b3e85"
                        },
                        new
                        {
                            UserId = "6a7897b7-2e41-4e78-9ca6-5cdf06d1f175",
                            RoleId = "6409a216-d91f-40ba-8b60-908d294b3e85"
                        },
                        new
                        {
                            UserId = "cc1d9934-720d-4315-a4af-180ef4f14f46",
                            RoleId = "6409a216-d91f-40ba-8b60-908d294b3e85"
                        },
                        new
                        {
                            UserId = "0bce2006-9a70-4967-b707-0d03e836b6da",
                            RoleId = "6409a216-d91f-40ba-8b60-908d294b3e85"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "a71366a7-5ddd-4e5e-858d-0ac4bc82014d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bf7887b-9f60-4636-9a6e-3e1127529ccb",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtjkd31OASuEbhCb4nEvjs7ocxih7/S9ZWhuKfge/TtGm8N1jitfKsU3iy7UvaqRg==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e45495a9-8d66-4e1b-8629-264c80bb9f48",
                            TwoFactorEnabled = false,
                            UserName = "admin@email.com",
                            AdministratorId = 1,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "1e7a0c67-e816-44ee-ba7a-506a7c4d5f25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45d2d4e8-58a1-446a-b948-789f90fa6d6f",
                            Email = "admin1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@EMAIL.COM",
                            NormalizedUserName = "ADMIN1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2iOlYYapVNgCqDr5DCCJ1/oqTZiwRKHbf0LRZnzHwWXsmIOq6IjCgNYUpDGiQpog==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "dc7b660b-13af-4748-aeef-ee84857527de",
                            TwoFactorEnabled = false,
                            UserName = "admin1@email.com",
                            AdministratorId = 2,
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "0d44cee7-2a63-44be-b856-c22676e9ae44",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "906f0711-a61d-41ca-a49d-5e133ac3ed8f",
                            Email = "teacher@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@EMAIL.COM",
                            NormalizedUserName = "TEACHER@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4Y+n2uyqtXsiSd/Ss9GjDzrJWykLw6rqPNmO0Dpt3lND/KuRNYly8JxPoypl8hpw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3d49d342-b4ad-4859-9a68-d51bc9e265d1",
                            TwoFactorEnabled = false,
                            UserName = "teacher@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            SurName = "Johnovych",
                            TeacherId = 1
                        },
                        new
                        {
                            Id = "7b9a41a7-2bdd-4412-b287-0c25c8c8a35d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39218991-6890-43bf-aedb-8a81aa3d5e6f",
                            Email = "teacher1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER1@EMAIL.COM",
                            NormalizedUserName = "TEACHER1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO1mwfbBy9PQttjs4WZXt3DwTuYXcWikMK1MH9Ai2U2Zsc8Wb7IxZ0qItWRn8YoQ5w==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cfa8f62d-131e-4c92-9218-7c1a8f7c4558",
                            TwoFactorEnabled = false,
                            UserName = "teacher1@email.com",
                            FirstName = "Serhiy",
                            LastName = "Stadnyk",
                            SurName = "Viacheslavovich",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = "395bb86a-a0f3-42df-a4d1-efc4c648a502",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b58f0b27-8e09-41b4-814b-3bcdbe2b2910",
                            Email = "student@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@EMAIL.COM",
                            NormalizedUserName = "STUDENT@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6EJT4gmXibiBL3AOsDNh6t5K4hzrbivfqToPGiP+87TeS0HCgz4/UougBGyZmklg==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "907b61d4-cd38-482a-ac65-f893e945345c",
                            TwoFactorEnabled = false,
                            UserName = "student@email.com",
                            FirstName = "John",
                            LastName = "Connor",
                            StudentId = 1,
                            SurName = "Johnovych"
                        },
                        new
                        {
                            Id = "6a7897b7-2e41-4e78-9ca6-5cdf06d1f175",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c79f5d4-6a2a-4703-b840-a78c80dbe4ab",
                            Email = "student1@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EMAIL.COM",
                            NormalizedUserName = "STUDENT1@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+f45mGQ+m67fXopo8MbjfVjDyinHfMI5OK+ShG/FSfAX3Y++KE9P/BkT610wCerw==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0b8dc280-557b-45f4-a7f4-6bfacd9f2bd5",
                            TwoFactorEnabled = false,
                            UserName = "student1@email.com",
                            FirstName = "Dima",
                            LastName = "Shostak",
                            StudentId = 2,
                            SurName = "Oleksiyovich"
                        },
                        new
                        {
                            Id = "cc1d9934-720d-4315-a4af-180ef4f14f46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9678a274-a80e-4974-a84f-278ce8f3dcb3",
                            Email = "student2@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EMAIL.COM",
                            NormalizedUserName = "STUDENT2@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMv5zHVbSmhSBhU2zEndSZFFO67XkwXxbQREMSEvNlIZ0AivdnLTRUXFGZLbUqjnA==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1a74520a-6eeb-4d26-9469-e21a770506e0",
                            TwoFactorEnabled = false,
                            UserName = "student2@email.com",
                            FirstName = "Yurii",
                            LastName = "Bortnik",
                            StudentId = 3,
                            SurName = "Andriyovich"
                        },
                        new
                        {
                            Id = "0bce2006-9a70-4967-b707-0d03e836b6da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aede0707-068d-4bc8-bffc-937e597338a6",
                            Email = "student3@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EMAIL.COM",
                            NormalizedUserName = "STUDENT3@EMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENRL/BhSCdjQ0LLk1+BePS7YTSh4NbRmdSgRxrNaOWzZjljL742HI1UVh+9Rp+BRdA==",
                            PhoneNumber = "+xx(xxx)xxx-xx-xx",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b78dbad2-7b13-4cda-93bc-c8dc0b84296f",
                            TwoFactorEnabled = false,
                            UserName = "student3@email.com",
                            FirstName = "Pavlo",
                            LastName = "Mayba",
                            StudentId = 4,
                            SurName = "Ivanovich"
                        });
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Homeworks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.HomeworkDone", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("HomeworksDone")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Homeworks.Homework", "Homework")
                        .WithOne("Lesson")
                        .HasForeignKey("FM_MyStat.Core.Entities.Lessons.Lesson", "HomeworkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Homework");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.LessonMark", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Lessons.Lesson", "Lesson")
                        .WithMany("LessonMarks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Student", "Student")
                        .WithMany("LessonMarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.TeacherSubject", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Subject", "Subject")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM_MyStat.Core.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeachersSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Administrator", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Administrator")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Administrator", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Student")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Student", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FM_MyStat.Core.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.HasOne("FM_MyStat.Core.Entities.Users.AppUser", "AppUser")
                        .WithOne("Teacher")
                        .HasForeignKey("FM_MyStat.Core.Entities.Users.Teacher", "AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Group", b =>
                {
                    b.Navigation("Homeworks");

                    b.Navigation("Lessons");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Homeworks.Homework", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Lessons.Lesson", b =>
                {
                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Student", b =>
                {
                    b.Navigation("HomeworksDone");

                    b.Navigation("LessonMarks");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.Teacher", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Lessons");

                    b.Navigation("TeachersSubjects");
                });

            modelBuilder.Entity("FM_MyStat.Core.Entities.Users.AppUser", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
